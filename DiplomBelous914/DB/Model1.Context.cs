//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DiplomBelous914.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityService> ActivityService { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<ClientContract> ClientContract { get; set; }
        public virtual DbSet<Competence> Competence { get; set; }
        public virtual DbSet<CompetenceCheck> CompetenceCheck { get; set; }
        public virtual DbSet<CompetenceWorker> CompetenceWorker { get; set; }
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<Education> Education { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<Password> Password { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<Salary> Salary { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Worker> Worker { get; set; }
        public virtual DbSet<View_Client> View_Client { get; set; }
        public virtual DbSet<View_Contract> View_Contract { get; set; }
        public virtual DbSet<View_Service> View_Service { get; set; }
        public virtual DbSet<View_ServiceWorker> View_ServiceWorker { get; set; }
        public virtual DbSet<View_Worker> View_Worker { get; set; }
        public virtual DbSet<VW_Worker_T> VW_Worker_T { get; set; }
    
        [DbFunction("Entities", "ContractService")]
        public virtual IQueryable<ContractService_Result> ContractService(string nameServace)
        {
            var nameServaceParameter = nameServace != null ?
                new ObjectParameter("NameServace", nameServace) :
                new ObjectParameter("NameServace", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ContractService_Result>("[Entities].[ContractService](@NameServace)", nameServaceParameter);
        }
    
        [DbFunction("Entities", "ContractView")]
        public virtual IQueryable<ContractView_Result> ContractView(Nullable<int> idContract)
        {
            var idContractParameter = idContract.HasValue ?
                new ObjectParameter("IdContract", idContract) :
                new ObjectParameter("IdContract", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ContractView_Result>("[Entities].[ContractView](@IdContract)", idContractParameter);
        }
    
        [DbFunction("Entities", "ServiceView")]
        public virtual IQueryable<ServiceView_Result> ServiceView(Nullable<int> idContract)
        {
            var idContractParameter = idContract.HasValue ?
                new ObjectParameter("IdContract", idContract) :
                new ObjectParameter("IdContract", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ServiceView_Result>("[Entities].[ServiceView](@IdContract)", idContractParameter);
        }
    
        public virtual ObjectResult<PR_Contract_Result> PR_Contract(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PR_Contract_Result>("PR_Contract", startDateParameter, endDateParameter);
        }
    
        public virtual int Pr_Salary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pr_Salary");
        }
    
        public virtual ObjectResult<PR_ServiceClient_Result> PR_ServiceClient(string nameService)
        {
            var nameServiceParameter = nameService != null ?
                new ObjectParameter("nameService", nameService) :
                new ObjectParameter("nameService", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PR_ServiceClient_Result>("PR_ServiceClient", nameServiceParameter);
        }
    
        public virtual ObjectResult<PR_ServiceName_Result> PR_ServiceName(string nameService)
        {
            var nameServiceParameter = nameService != null ?
                new ObjectParameter("nameService", nameService) :
                new ObjectParameter("nameService", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PR_ServiceName_Result>("PR_ServiceName", nameServiceParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
